// Generated by CoffeeScript 1.3.1
(function() {
  var GroupByObjectKey, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  GroupByObjectKey = (function(_super) {

    __extends(GroupByObjectKey, _super);

    GroupByObjectKey.name = 'GroupByObjectKey';

    function GroupByObjectKey() {
      var _this = this;
      this.data = [];
      this.key = null;
      this.inPorts = {
        "in": new noflo.Port(),
        key: new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts["in"].on("connect", function() {
        return _this.data = [];
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        if (_this.key) {
          return _this.getKey(data);
        }
        return _this.data.push(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        var data, _i, _len, _ref;
        if (!_this.data.length) {
          _this.outPorts.out.disconnect();
          return;
        }
        if (!_this.key) {
          return;
        }
        _ref = _this.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          _this.getKey(data);
        }
        return _this.outPorts.out.disconnect();
      });
      this.inPorts.key.on("data", function(data) {
        return _this.key = data;
      });
      this.inPorts.key.on("disconnect", function() {
        var data, _i, _len, _ref;
        if (!_this.data.length) {
          return;
        }
        _ref = _this.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          _this.getKey(data);
        }
        return _this.outPorts.out.disconnect();
      });
    }

    GroupByObjectKey.prototype.getKey = function(data) {
      var group;
      if (!this.key) {
        throw "Key not defined";
      }
      if (typeof data !== "object") {
        throw "Data is not an object";
      }
      group = data[this.key];
      if (typeof data[this.key] !== "string") {
        group = "undefined";
      }
      this.outPorts.out.beginGroup(group);
      this.outPorts.out.send(data);
      return this.outPorts.out.endGroup();
    };

    return GroupByObjectKey;

  })(noflo.Component);

  exports.getComponent = function() {
    return new GroupByObjectKey;
  };

}).call(this);
