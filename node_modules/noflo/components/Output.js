// Generated by CoffeeScript 1.3.1
(function() {
  var Output, noflo, util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  util = require("util");

  Output = (function(_super) {

    __extends(Output, _super);

    Output.name = 'Output';

    Output.prototype.description = "This component receives input on a single inport, and sends the data items directly to console.log";

    function Output() {
      var _this = this;
      this.options = {
        showHidden: false,
        depth: 2,
        colors: false
      };
      this.inPorts = {
        "in": new noflo.ArrayPort,
        options: new noflo.Port
      };
      this.outPorts = {
        out: new noflo.Port
      };
      this.inPorts["in"].on("data", function(data) {
        _this.log(data);
        if (_this.outPorts.out.isAttached()) {
          return _this.outPorts.out.send(data);
        }
      });
      this.inPorts.options.on("data", function(data) {
        return _this.setOptions(data);
      });
    }

    Output.prototype.setOptions = function(options) {
      var key, value, _results;
      if (typeof options !== "object") {
        throw "Options is not an object";
      }
      _results = [];
      for (key in options) {
        if (!__hasProp.call(options, key)) continue;
        value = options[key];
        _results.push(this.options[key] = value);
      }
      return _results;
    };

    Output.prototype.log = function(data) {
      return console.log(util.inspect(data, this.options.showHidden, this.options.depth, this.options.colors));
    };

    return Output;

  })(noflo.Component);

  exports.getComponent = function() {
    return new Output();
  };

}).call(this);
