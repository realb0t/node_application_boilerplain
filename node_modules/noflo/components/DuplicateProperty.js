// Generated by CoffeeScript 1.3.1
(function() {
  var DuplicateProperty, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  DuplicateProperty = (function(_super) {

    __extends(DuplicateProperty, _super);

    DuplicateProperty.name = 'DuplicateProperty';

    function DuplicateProperty() {
      var _this = this;
      this.properties = {};
      this.separator = '/';
      this.inPorts = {
        property: new noflo.ArrayPort(),
        separator: new noflo.Port(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.property.on("data", function(data) {
        return _this.setProperty(data);
      });
      this.inPorts.separator.on("data", function(data) {
        return _this.separator = data;
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.addProperties(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    DuplicateProperty.prototype.setProperty = function(prop) {
      var propParts;
      if (typeof prop === "object") {
        this.prop = prop;
        return;
      }
      propParts = prop.split("=");
      if (propParts.length > 2) {
        this.properties[propParts.pop()] = propParts;
        return;
      }
      return this.properties[propParts[1]] = propParts[0];
    };

    DuplicateProperty.prototype.addProperties = function(object) {
      var newValues, newprop, original, originalProp, _i, _len, _ref;
      _ref = this.properties;
      for (newprop in _ref) {
        original = _ref[newprop];
        if (typeof original === "string") {
          object[newprop] = object[original];
          continue;
        }
        newValues = [];
        for (_i = 0, _len = original.length; _i < _len; _i++) {
          originalProp = original[_i];
          newValues.push(object[originalProp]);
        }
        object[newprop] = newValues.join(this.separator);
      }
      return this.outPorts.out.send(object);
    };

    return DuplicateProperty;

  })(noflo.Component);

  exports.getComponent = function() {
    return new DuplicateProperty;
  };

}).call(this);
