// Generated by CoffeeScript 1.3.1
(function() {
  var Split, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  Split = (function(_super) {

    __extends(Split, _super);

    Split.name = 'Split';

    Split.prototype.description = "This component receives data on a single input port and sends the same data out to all connected output ports";

    function Split() {
      var _this = this;
      this.inPorts = {
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.ArrayPort()
      };
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.outPorts.out.send(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    return Split;

  })(noflo.Component);

  exports.getComponent = function() {
    return new Split;
  };

}).call(this);
