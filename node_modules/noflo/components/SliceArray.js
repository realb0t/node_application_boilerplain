// Generated by CoffeeScript 1.3.1
(function() {
  var SliceArray, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  SliceArray = (function(_super) {

    __extends(SliceArray, _super);

    SliceArray.name = 'SliceArray';

    function SliceArray() {
      var _this = this;
      this.begin = 0;
      this.end = null;
      this.inPorts = {
        "in": new noflo.Port(),
        begin: new noflo.Port(),
        end: new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port(),
        error: new noflo.Port()
      };
      this.inPorts.begin.on("data", function(data) {
        return _this.begin = data;
      });
      this.inPorts.end.on("data", function(data) {
        return _this.end = data;
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.sliceData(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    SliceArray.prototype.sliceData = function(data) {
      var sliced;
      if (!data.slice) {
        return this.outPorts.error.send("Data " + (typeof data) + " cannot be sliced");
      }
      if (this.end !== null) {
        sliced = data.slice(this.begin, this.end);
      }
      if (this.end === null) {
        sliced = data.slice(this.begin);
      }
      return this.outPorts.out.send(sliced);
    };

    return SliceArray;

  })(noflo.Component);

  exports.getComponent = function() {
    return new SliceArray;
  };

}).call(this);
