// Generated by CoffeeScript 1.3.1
(function() {
  var Template, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  Template = (function(_super) {

    __extends(Template, _super);

    Template.name = 'Template';

    Template.prototype.description = "This component receives a templating engine name, a string containing the template, and variables for the template. Then it runs the chosen template engine and sends resulting templated content to the output port";

    function Template() {
      var _this = this;
      this.engine = "jade";
      this.variables = null;
      this.template = null;
      this.inPorts = {
        engine: new noflo.Port(),
        options: new noflo.Port(),
        template: new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.engine.on("data", function(data) {
        return _this.engine = data;
      });
      this.inPorts.options.on("connect", function() {
        return _this.variables = null;
      });
      this.inPorts.options.on("data", function(data) {
        return _this.variables = data;
      });
      this.inPorts.options.on("disconnect", function() {
        if (_this.template) {
          return _this.outPorts.out.connect();
        }
      });
      this.inPorts.template.on("connect", function() {
        return _this.template = null;
      });
      this.inPorts.template.on("data", function(data) {
        return _this.template = data;
      });
      this.inPorts.template.on("disconnect", function() {
        if (_this.variables) {
          return _this.outPorts.out.connect();
        }
      });
      this.outPorts.out.on("connect", function() {
        var fn, templating;
        templating = require(_this.engine);
        fn = templating.compile(_this.template, _this.variables);
        _this.outPorts.out.send(fn(_this.variables.locals));
        _this.variables = null;
        return _this.outPorts.out.disconnect();
      });
    }

    return Template;

  })(noflo.Component);

  exports.getComponent = function() {
    return new Template();
  };

}).call(this);
