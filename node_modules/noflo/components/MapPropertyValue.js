// Generated by CoffeeScript 1.3.1
(function() {
  var MapPropertyValue, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  MapPropertyValue = (function(_super) {

    __extends(MapPropertyValue, _super);

    MapPropertyValue.name = 'MapPropertyValue';

    function MapPropertyValue() {
      var _this = this;
      this.mapAny = {};
      this.map = {};
      this.regexpAny = {};
      this.regexp = {};
      this.inPorts = {
        map: new noflo.ArrayPort(),
        regexp: new noflo.ArrayPort(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.map.on("data", function(data) {
        return _this.prepareMap(data);
      });
      this.inPorts.regexp.on("data", function(data) {
        return _this.prepareRegExp(data);
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.mapData(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    MapPropertyValue.prototype.prepareMap = function(map) {
      var mapParts;
      if (typeof map === "object") {
        this.mapAny = map;
        return;
      }
      mapParts = map.split("=");
      if (mapParts.length === 3) {
        this.map[mapParts[0]] = {
          from: mapParts[1],
          to: mapParts[2]
        };
        return;
      }
      return this.mapAny[mapParts[0]] = mapParts[1];
    };

    MapPropertyValue.prototype.prepareRegExp = function(map) {
      var mapParts;
      mapParts = map.split("=");
      if (mapParts.length === 3) {
        this.regexp[mapParts[0]] = {
          from: mapParts[1],
          to: mapParts[2]
        };
        return;
      }
      return this.regexpAny[mapParts[0]] = mapParts[1];
    };

    MapPropertyValue.prototype.mapData = function(data) {
      var expression, matched, property, regexp, replacement, value, _ref;
      for (property in data) {
        value = data[property];
        if (this.map[property] && this.map[property].from === value) {
          data[property] = this.map[property].to;
        }
        if (this.mapAny[value]) {
          data[property] = this.mapAny[value];
        }
        if (this.regexp[property]) {
          regexp = new RegExp(this.regexp[property].from);
          matched = regexp.exec(value);
          if (matched) {
            data[property] = value.replace(regexp, this.regexp[property].to);
          }
        }
        _ref = this.regexpAny;
        for (expression in _ref) {
          replacement = _ref[expression];
          regexp = new RegExp(expression);
          matched = regexp.exec(value);
          if (!matched) {
            continue;
          }
          data[property] = value.replace(regexp, replacement);
        }
      }
      return this.outPorts.out.send(data);
    };

    return MapPropertyValue;

  })(noflo.Component);

  exports.getComponent = function() {
    return new MapPropertyValue;
  };

}).call(this);
