// Generated by CoffeeScript 1.3.1
(function() {
  var Graph, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  Graph = (function(_super) {

    __extends(Graph, _super);

    Graph.name = 'Graph';

    function Graph() {
      var network, ready,
        _this = this;
      network = null;
      ready = false;
      this.inPorts = {
        graph: new noflo.Port()
      };
      this.outPorts = {};
      this.inPorts.graph.on("data", function(data) {
        return _this.setGraph(data);
      });
    }

    Graph.prototype.setGraph = function(graph) {
      var _this = this;
      if (graph instanceof noflo.Graph) {
        return this.createNetwork(graph);
      }
      if (graph.substr(0, 1) !== "/") {
        graph = "" + (process.cwd()) + "/" + graph;
      }
      return graph = noflo.graph.loadFile(graph, function(instance) {
        return _this.createNetwork(instance);
      });
    };

    Graph.prototype.createNetwork = function(graph) {
      var name, notReady, process, _ref;
      this.network = noflo.createNetwork(graph, true);
      notReady = false;
      _ref = this.network.processes;
      for (name in _ref) {
        process = _ref[name];
        if (!this.findEdgePorts(name, process)) {
          notReady = true;
        }
      }
      if (!notReady) {
        this.ready = true;
        return this.emit("ready");
      }
    };

    Graph.prototype.findEdgePorts = function(name, process) {
      var newPort, port, portName, _ref, _ref1,
        _this = this;
      if (!process.component.isReady()) {
        process.component.once("ready", function() {
          _this.findEdgePorts(name, process);
          _this.ready = true;
          return _this.emit("ready");
        });
        return false;
      }
      _ref = process.component.inPorts;
      for (portName in _ref) {
        port = _ref[portName];
        if (port.isAttached()) {
          continue;
        }
        newPort = "" + (name.toLowerCase()) + "." + portName;
        this.inPorts[newPort] = this.replicateInPort(port, newPort);
      }
      _ref1 = process.component.outPorts;
      for (portName in _ref1) {
        port = _ref1[portName];
        if (port.isAttached()) {
          continue;
        }
        newPort = "" + (name.toLowerCase()) + "." + portName;
        this.outPorts[newPort] = this.replicateOutPort(port, newPort);
      }
      return true;
    };

    Graph.prototype.replicatePort = function(port) {
      if (port instanceof noflo.ArrayPort) {
        return new noflo.ArrayPort();
      }
      if (!(port instanceof noflo.ArrayPort)) {
        return new noflo.Port();
      }
    };

    Graph.prototype.replicateInPort = function(port, portName) {
      var newPort;
      newPort = this.replicatePort(port);
      newPort.on("attach", function(socket) {
        var newSocket;
        newSocket = noflo.internalSocket.createSocket();
        return port.attach(newSocket);
      });
      newPort.on("connect", function() {
        if (!port.isAttached()) {
          return;
        }
        return port.connect();
      });
      newPort.on("begingroup", function(group) {
        return port.beginGroup(group);
      });
      newPort.on("data", function(data) {
        return port.send(data);
      });
      newPort.on("endgroup", function() {
        return port.endGroup();
      });
      newPort.on("disconnect", function() {
        return port.disconnect();
      });
      return newPort;
    };

    Graph.prototype.replicateOutPort = function(port, portName) {
      var newPort;
      newPort = this.replicatePort(port);
      newPort.on("attach", function(socket) {
        var newSocket;
        newSocket = noflo.internalSocket.createSocket();
        return port.attach(newSocket);
      });
      port.on("connect", function() {
        if (!newPort.isAttached()) {
          return;
        }
        return newPort.connect();
      });
      port.on("begingroup", function(group) {
        if (!newPort.isAttached()) {
          return;
        }
        return newPort.beginGroup(group);
      });
      port.on("data", function(data) {
        if (!newPort.isAttached()) {
          return;
        }
        return newPort.send(data);
      });
      port.on("endgroup", function() {
        if (!newPort.isAttached()) {
          return;
        }
        return newPort.endGroup();
      });
      port.on("disconnect", function() {
        return newPort.disconnect();
      });
      return newPort;
    };

    Graph.prototype.isReady = function() {
      return this.ready;
    };

    return Graph;

  })(noflo.Component);

  exports.getComponent = function() {
    return new Graph;
  };

}).call(this);
