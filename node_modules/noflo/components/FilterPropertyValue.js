// Generated by CoffeeScript 1.3.1
(function() {
  var FilterPropertyValue, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  FilterPropertyValue = (function(_super) {

    __extends(FilterPropertyValue, _super);

    FilterPropertyValue.name = 'FilterPropertyValue';

    function FilterPropertyValue() {
      var _this = this;
      this.accepts = {};
      this.regexps = {};
      this.inPorts = {
        accept: new noflo.ArrayPort(),
        regexp: new noflo.ArrayPort(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.accept.on("data", function(data) {
        return _this.prepareAccept(data);
      });
      this.inPorts.regexp.on("data", function(data) {
        return _this.prepareRegExp(data);
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.filterData(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    FilterPropertyValue.prototype.prepareAccept = function(map) {
      var mapParts;
      if (typeof map === "object") {
        this.accepts = map;
        return;
      }
      mapParts = map.split("=");
      try {
        return this.accepts[mapParts[0]] = eval(mapParts[1]);
      } catch (e) {
        if (e instanceof ReferenceError) {
          return this.accepts[mapParts[0]] = mapParts[1];
        } else {
          throw e;
        }
      }
    };

    FilterPropertyValue.prototype.prepareRegExp = function(map) {
      var mapParts;
      mapParts = map.split("=");
      return this.regexps[mapParts[0]] = mapParts[1];
    };

    FilterPropertyValue.prototype.filterData = function(object) {
      var match, newData, property, regexp, value;
      newData = {};
      match = false;
      for (property in object) {
        value = object[property];
        if (this.accepts[property]) {
          if (this.accepts[property] !== value) {
            continue;
          }
          match = true;
        }
        if (this.regexps[property]) {
          regexp = new RegExp(this.regexps[property]);
          if (!regexp.exec(value)) {
            continue;
          }
          match = true;
        }
        newData[property] = value;
        continue;
      }
      if (!match) {
        return;
      }
      return this.outPorts.out.send(newData);
    };

    return FilterPropertyValue;

  })(noflo.Component);

  exports.getComponent = function() {
    return new FilterPropertyValue;
  };

}).call(this);
