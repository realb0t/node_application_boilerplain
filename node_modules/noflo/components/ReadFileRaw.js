// Generated by CoffeeScript 1.3.1
(function() {
  var ReadFileRaw, fs, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  noflo = require("noflo");

  ReadFileRaw = (function(_super) {

    __extends(ReadFileRaw, _super);

    ReadFileRaw.name = 'ReadFileRaw';

    function ReadFileRaw() {
      var _this = this;
      this.inPorts = {
        source: new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port(),
        error: new noflo.Port()
      };
      this.inPorts.source.on("data", function(data) {
        return _this.readFile(data);
      });
    }

    ReadFileRaw.prototype.readBuffer = function(fd, position, size, buffer) {
      var _this = this;
      return fs.read(fd, buffer, 0, buffer.length, position, function(err, bytes, buffer) {
        _this.outPorts.out.send(buffer.slice(0, bytes));
        position += buffer.length;
        if (position >= size) {
          return _this.outPorts.out.disconnect();
        }
        return _this.readBuffer(fd, position, size, buffer);
      });
    };

    ReadFileRaw.prototype.readFile = function(filename) {
      var _this = this;
      return fs.open(filename, 'r', function(err, fd) {
        if (err) {
          return _this.outPorts.error.send(err);
        }
        return fs.fstat(fd, function(err, stats) {
          var buffer;
          if (err) {
            return _this.outPorts.error.send(err);
          }
          buffer = new Buffer(stats.size);
          return _this.readBuffer(fd, 0, stats.size, buffer);
        });
      });
    };

    return ReadFileRaw;

  })(noflo.Component);

  exports.getComponent = function() {
    return new ReadFileRaw;
  };

}).call(this);
