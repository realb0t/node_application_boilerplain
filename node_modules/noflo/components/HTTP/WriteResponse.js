// Generated by CoffeeScript 1.3.1
(function() {
  var WriteResponse, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  WriteResponse = (function(_super) {

    __extends(WriteResponse, _super);

    WriteResponse.name = 'WriteResponse';

    WriteResponse.prototype.description = "This component receives a request and a string on the input ports, writes that string to the request's response and forwards the request";

    function WriteResponse() {
      var _this = this;
      this.string = "";
      this.request = null;
      this.inPorts = {
        string: new noflo.Port(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.string.on("connect", function() {
        return _this.string = "";
      });
      this.inPorts.string.on("data", function(data) {
        return _this.string += data;
      });
      this.inPorts.string.on("disconnect", function() {
        if (_this.request) {
          return _this.outPorts.out.connect();
        }
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.request = data;
      });
      this.inPorts["in"].on("disconnect", function() {
        if (_this.string) {
          return _this.outPorts.out.connect();
        }
      });
      this.outPorts.out.on("connect", function() {
        _this.request.res.write(_this.string);
        _this.outPorts.out.send(_this.request);
        _this.request = null;
        _this.string = null;
        return _this.outPorts.out.disconnect();
      });
    }

    return WriteResponse;

  })(noflo.Component);

  exports.getComponent = function() {
    return new WriteResponse();
  };

}).call(this);
