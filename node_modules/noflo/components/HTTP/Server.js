// Generated by CoffeeScript 1.3.1
(function() {
  var Server, http, noflo, uuid,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  http = require("connect");

  uuid = require("node-uuid");

  Server = (function(_super) {

    __extends(Server, _super);

    Server.name = 'Server';

    Server.prototype.description = "This component receives a port and host, and initializes a HTTP server for that combination. It sends out a request/response pair for each HTTP request it receives";

    function Server() {
      this.sendRequest = __bind(this.sendRequest, this);

      var _this = this;
      this.server = null;
      this.serverPort = null;
      this.inPorts = {
        listen: new noflo.Port()
      };
      this.outPorts = {
        request: new noflo.Port()
      };
      this.inPorts.listen.on("data", function(data) {
        return _this.serverPort = data;
      });
      this.inPorts.listen.on("disconnect", function() {
        _this.server = http.createServer(_this.sendRequest);
        return _this.server.listen(_this.serverPort);
      });
    }

    Server.prototype.sendRequest = function(req, res) {
      this.outPorts.request.beginGroup(uuid());
      this.outPorts.request.send({
        req: req,
        res: res
      });
      this.outPorts.request.endGroup();
      return this.outPorts.request.disconnect();
    };

    return Server;

  })(noflo.Component);

  exports.getComponent = function() {
    return new Server();
  };

}).call(this);
