// Generated by CoffeeScript 1.3.1
(function() {
  var StoreDataPoint, noflo, request,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require('noflo');

  request = require('request');

  StoreDataPoint = (function(_super) {

    __extends(StoreDataPoint, _super);

    StoreDataPoint.name = 'StoreDataPoint';

    function StoreDataPoint() {
      var _this = this;
      this.apiKey = null;
      this.appId = null;
      this.metrics = [];
      this.inPorts = {
        apikey: new noflo.Port,
        appid: new noflo.Port,
        "in": new noflo.ArrayPort
      };
      this.outPorts = {
        out: new noflo.Port,
        error: new noflo.Port
      };
      this.inPorts.apikey.on('data', function(data) {
        _this.apiKey = data;
        return _this.sendMetrics();
      });
      this.inPorts.appid.on('data', function(data) {
        _this.appId = encodeURIComponent(data);
        return _this.sendMetrics();
      });
      this.inPorts["in"].on('data', function(data) {
        _this.metrics.push(data);
        return _this.sendMetrics();
      });
    }

    StoreDataPoint.prototype.sendMetrics = function() {
      var metric, _i, _len, _ref;
      if (!(this.apiKey && this.appId)) {
        return;
      }
      _ref = this.metrics;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        metric = _ref[_i];
        this.sendMetric(metric);
      }
      return this.metrics = [];
    };

    StoreDataPoint.prototype.sendMetric = function(name) {
      var _this = this;
      return request.post({
        url: "http://track.restfulmetrics.com/apps/" + this.appId + "/metrics.json",
        json: {
          metric: {
            name: name,
            value: 1
          }
        },
        headers: {
          Authorization: this.apiKey
        }
      }, function(err, resp, body) {
        if (err) {
          return _this.outPorts.error.send(err);
        }
        if (resp.statusCode !== 200) {
          return _this.outPorts.error.send(body);
        }
        return _this.outPorts.out.send(name);
      });
    };

    return StoreDataPoint;

  })(noflo.Component);

  exports.getComponent = function() {
    return new StoreDataPoint;
  };

}).call(this);
