// Generated by CoffeeScript 1.3.1
(function() {
  var ConvertToJson, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  ConvertToJson = (function(_super) {

    __extends(ConvertToJson, _super);

    ConvertToJson.name = 'ConvertToJson';

    function ConvertToJson() {
      var _this = this;
      this.id = null;
      this.inPorts = {
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.id = group;
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.outPorts.out.send(_this.convert(data));
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.id = null;
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    ConvertToJson.prototype.convert = function(data) {
      var json;
      if (data['completed-count'] && data['uncompleted-count']) {
        return this.convertTaskList(data);
      }
      if (data['completed'] && data['todo-list-id']) {
        return this.convertTask(data);
      }
      if (data['hours'] && data['person-id']) {
        return this.convertHour(data);
      }
      return json = {
        "@type": "prj:Project",
        "@subject": "" + this.id + "projects/" + data.id['#'],
        "prj:name": data.name,
        "prj:status": data.status,
        "prj:startDate": data['created-on']['#'],
        "dc:modified": data['last-changed-on']['#']
      };
    };

    ConvertToJson.prototype.convertTaskList = function(data) {
      var json;
      return json = {
        "@type": "prj:TaskList",
        "@subject": "" + this.id + "todo_lists/" + data.id['#'],
        "prj:name": data.name,
        "prj:inProject": "" + this.id + "projects/" + data['project-id']['#']
      };
    };

    ConvertToJson.prototype.convertTask = function(data) {
      var json;
      json = {
        "@type": "prj:Task",
        "@subject": "" + this.id + "todo_items/" + data.id['#'],
        "prj:name": data.content,
        "prj:inTaskList": "" + this.id + "todo_lists/" + data['todo-list-id']['#'],
        "dc:created": data['created-at']['#']
      };
      if (data['completed-on']) {
        json['prj:finishDate'] = data['completed-on']['#'];
      }
      return json;
    };

    ConvertToJson.prototype.convertHour = function(data) {
      var json;
      json = {
        "@type": "prj:Session",
        "@subject": "" + this.id + "time_entries/" + data.id['#'],
        "prj:submittedDate": data.date['#'],
        "prj:duration": parseFloat(data.hours['#']),
        "dc:description": data.description,
        "prj:reporter": "" + this.id + "people/" + data['person-id']['#'],
        "prj:inProject": "" + this.id + "projects/" + data['project-id']['#']
      };
      if (data['todo-item-id']['#']) {
        json['prj:inTask'] = "" + this.id + "todo_items/" + data['todo-item-id']['#'];
      }
      return json;
    };

    return ConvertToJson;

  })(noflo.Component);

  exports.getComponent = function() {
    return new ConvertToJson;
  };

}).call(this);
