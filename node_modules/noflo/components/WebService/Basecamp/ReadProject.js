// Generated by CoffeeScript 1.3.1
(function() {
  var ReadProject, base, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  base = require("./BasecampComponent");

  ReadProject = (function(_super) {

    __extends(ReadProject, _super);

    ReadProject.name = 'ReadProject';

    function ReadProject() {
      var _this = this;
      this.project = null;
      this.basePortSetup();
      this.inPorts.project = new noflo.Port();
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.project.on("data", function(data) {
        return _this.project = data;
      });
      this.inPorts.project.on("disconnect", function() {
        if (_this.hostname && _this.apikey) {
          return _this.readProject();
        }
      });
      this.inPorts.apikey.on("disconnect", function() {
        if (_this.hostname && _this.project) {
          return _this.readProject();
        }
      });
      this.inPorts.hostname.on("disconnect", function() {
        if (_this.apikey && _this.project) {
          return _this.readProject();
        }
      });
    }

    ReadProject.prototype.readProject = function() {
      var _this = this;
      return this.get("/projects/" + this.project + ".xml", function(data) {
        return _this.parseProject(data);
      });
    };

    ReadProject.prototype.parseProject = function(data) {
      var id, target;
      target = this.outPorts.out;
      id = "https://" + this.hostname + "/";
      return this.parse(data, function(parsed) {
        target.beginGroup(id);
        target.send(parsed);
        target.endGroup();
        return target.disconnect();
      });
    };

    return ReadProject;

  })(base.BasecampComponent);

  exports.getComponent = function() {
    return new ReadProject;
  };

}).call(this);
