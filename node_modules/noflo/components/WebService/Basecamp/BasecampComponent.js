// Generated by CoffeeScript 1.3.1
(function() {
  var BasecampComponent, https, noflo, xml2js,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  https = require("https");

  xml2js = require("xml2js");

  BasecampComponent = (function(_super) {

    __extends(BasecampComponent, _super);

    BasecampComponent.name = 'BasecampComponent';

    function BasecampComponent() {
      return BasecampComponent.__super__.constructor.apply(this, arguments);
    }

    BasecampComponent.prototype.basePortSetup = function() {
      var _this = this;
      this.apikey = null;
      this.hostname = null;
      this.inPorts = {
        apikey: new noflo.Port(),
        hostname: new noflo.Port()
      };
      this.inPorts.apikey.on("data", function(data) {
        return _this.apikey = data;
      });
      return this.inPorts.hostname.on("data", function(data) {
        return _this.hostname = data;
      });
    };

    BasecampComponent.prototype.prepareAuth = function(token) {
      var encoded;
      encoded = new Buffer("" + token + ":X").toString('base64');
      return "Basic " + encoded;
    };

    BasecampComponent.prototype.prepareHeaders = function(host, token) {
      return {
        "Content-Type": "application/xml",
        Authorization: this.prepareAuth(token),
        Host: host
      };
    };

    BasecampComponent.prototype.get = function(path, success, page) {
      var component, options, req;
      if (page == null) {
        page = null;
      }
      options = {
        host: this.hostname,
        port: 443,
        path: path,
        headers: this.prepareHeaders(this.hostname, this.apikey)
      };
      if (page) {
        options.path = "" + path + "?page=" + page;
      }
      if (!page) {
        page = 1;
      }
      component = this;
      return req = https.get(options, function(resp) {
        var body;
        resp.setEncoding("utf8");
        body = "";
        resp.on("data", function(data) {
          if (!(resp.statusCode < 400)) {
            throw resp.headers.status;
          }
          return body += data;
        });
        return resp.on("end", function() {
          success(body);
          if (resp.headers['x-pages'] > page) {
            return component.get(path, success, page + 1);
          }
        });
      });
    };

    BasecampComponent.prototype.parse = function(data, success) {
      var parser;
      parser = new xml2js.Parser;
      parser.on("end", function(parsed) {
        return success(parsed);
      });
      return parser.parseString(data);
    };

    return BasecampComponent;

  })(noflo.Component);

  exports.BasecampComponent = BasecampComponent;

}).call(this);
