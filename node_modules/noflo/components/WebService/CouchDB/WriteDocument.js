// Generated by CoffeeScript 1.3.1
(function() {
  var WriteDocument, couch, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  couch = require("couch-client");

  WriteDocument = (function(_super) {

    __extends(WriteDocument, _super);

    WriteDocument.name = 'WriteDocument';

    function WriteDocument() {
      var _this = this;
      this.request = null;
      this.connection = null;
      this.data = [];
      this.inPorts = {
        "in": new noflo.ArrayPort(),
        connection: new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.connection.on("data", function(data) {
        var _i, _len, _ref, _results;
        _this.connection = data;
        if (!_this.data.length) {
          return;
        }
        _ref = _this.data;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          data = _ref[_i];
          _results.push(_this.saveObject(data));
        }
        return _results;
      });
      this.inPorts["in"].on("data", function(data) {
        if (_this.connection) {
          return _this.saveObject(data);
        }
        return _this.data.push(data);
      });
      this.inPorts["in"].on("disconnect", function() {
        var port, _i, _len, _ref;
        if (!_this.outPorts.out.isAttached()) {
          return;
        }
        _ref = _this.inPorts["in"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          port = _ref[_i];
          if (port.isConnected()) {
            return;
          }
        }
        return _this.outPorts.out.disconnect();
      });
    }

    WriteDocument.prototype.saveObject = function(object) {
      var _this = this;
      return this.connection.save(object, function(err, document) {
        if (err) {
          return console.error(err);
        }
        if (!_this.outPorts.out.isAttached()) {
          return;
        }
        return _this.outPorts.out.send(document);
      });
    };

    return WriteDocument;

  })(noflo.Component);

  exports.getComponent = function() {
    return new WriteDocument;
  };

}).call(this);
