// Generated by CoffeeScript 1.3.1
(function() {
  var ReadDocumentAttachment, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  ReadDocumentAttachment = (function(_super) {

    __extends(ReadDocumentAttachment, _super);

    ReadDocumentAttachment.name = 'ReadDocumentAttachment';

    function ReadDocumentAttachment() {
      var _this = this;
      this.connection = null;
      this.document = null;
      this.attachment = null;
      this.inPorts = {
        connection: new noflo.Port,
        document: new noflo.Port,
        attachment: new noflo.Port
      };
      this.outPorts = {
        out: new noflo.Port
      };
      this.inPorts.connection.on("data", function(data) {
        _this.connection = data;
        if (_this.document && _this.attachment) {
          return _this.readAttachment();
        }
      });
      this.inPorts.document.on("data", function(data) {
        _this.document = data;
        if (_this.connection && _this.attachment) {
          return _this.readAttachment();
        }
      });
      this.inPorts.attachment.on("data", function(data) {
        _this.attachment = data;
        if (_this.connection && _this.document) {
          return _this.readAttachment();
        }
      });
    }

    ReadDocumentAttachment.prototype.getHeaders = function() {
      var headers;
      headers = {
        Host: this.connection.uri.hostname
      };
      if (this.connection.uri.auth) {
        headers.Authorization = "Basic " + new Buffer(this.connection.uri.auth, "ascii").toString("base64");
      }
      return headers;
    };

    ReadDocumentAttachment.prototype.getRequest = function(attachment, callback) {
      var options, req;
      options = {
        host: this.connection.uri.hostname,
        method: "GET",
        path: "" + this.connection.uri.pathname + "/" + this.document['_id'] + "/" + attachment,
        port: this.connection.uri.port,
        headers: this.getHeaders()
      };
      req = this.connection.uri.protocolHandler.request(options, callback);
      return req.end();
    };

    ReadDocumentAttachment.prototype.getAttachmentNameByIndex = function(document, index) {
      var count, name, value, _ref;
      count = 0;
      index = parseInt(index);
      _ref = document['_attachments'];
      for (name in _ref) {
        value = _ref[name];
        if (count === index) {
          return name;
        }
        count++;
      }
      return index;
    };

    ReadDocumentAttachment.prototype.getAttachmentName = function(document, attachment) {
      if (isNaN(attachment - 0)) {
        return attachment;
      }
      return this.getAttachmentNameByIndex(document, attachment);
    };

    ReadDocumentAttachment.prototype.readAttachment = function() {
      var attachment,
        _this = this;
      attachment = this.getAttachmentName(this.document, this.attachment);
      return this.getRequest(attachment, function(response) {
        var body, port;
        response.setEncoding("binary");
        body = "";
        port = _this.outPorts.out;
        response.on("data", function(chunk) {
          return body += chunk;
        });
        return response.on("end", function() {
          var buffer;
          buffer = new Buffer(body, "binary");
          port.send(buffer);
          return port.disconnect();
        });
      });
    };

    return ReadDocumentAttachment;

  })(noflo.Component);

  exports.getComponent = function() {
    return new ReadDocumentAttachment;
  };

}).call(this);
