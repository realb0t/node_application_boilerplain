// Generated by CoffeeScript 1.3.1
(function() {
  var GetChanges, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  GetChanges = (function(_super) {

    __extends(GetChanges, _super);

    GetChanges.name = 'GetChanges';

    function GetChanges() {
      var _this = this;
      this.connection = null;
      this.options = null;
      this.defaults = {
        feed: "continuous",
        heartbeat: 1000
      };
      this.request = null;
      this.streamData = "";
      this.inPorts = {
        connection: new noflo.Port(),
        option: new noflo.ArrayPort()
      };
      this.outPorts = {
        out: new noflo.ArrayPort()
      };
      this.inPorts.connection.on("data", function(data) {
        _this.connection = data;
        if (_this.options) {
          return _this.getChanges();
        }
      });
      this.inPorts.option.on("data", function(data) {
        _this.setOption(data);
        if (_this.connection) {
          return _this.getChanges();
        }
      });
    }

    GetChanges.prototype.setOption = function(option) {
      var optionParts;
      if (typeof option === "object") {
        this.options = option;
        return;
      }
      if (!this.options) {
        this.options = this.defaults;
      }
      optionParts = option.split("=");
      return this.options[optionParts[0]] = optionParts[1];
    };

    GetChanges.prototype.getQuery = function() {
      var key, queries, value, _ref;
      queries = [];
      _ref = this.options;
      for (key in _ref) {
        value = _ref[key];
        queries.push("" + key + "=" + value);
      }
      return "?" + (queries.join('&'));
    };

    GetChanges.prototype.streamToLines = function() {
      var line, newline;
      newline = this.streamData.indexOf("\n");
      if (newline === -1) {
        return;
      }
      line = this.streamData.substr(0, newline).trim();
      this.streamData = this.streamData.substr(newline + 1);
      if (line.length) {
        this.outPorts.out.send(JSON.parse(line));
      }
      return this.streamToLines();
    };

    GetChanges.prototype.getChanges = function() {
      var url,
        _this = this;
      if (this.request) {
        this.request.end();
      }
      url = "" + this.connection.uri.pathname + "/_changes/" + (this.getQuery());
      this.request = this.connection.request("GET", url);
      this.request.on("data", function(data) {
        _this.streamData += data;
        return _this.streamToLines();
      });
      return this.request.on("end", function() {
        return _this.outPorts.out.disconnect();
      });
    };

    return GetChanges;

  })(noflo.Component);

  exports.getComponent = function() {
    return new GetChanges;
  };

}).call(this);
