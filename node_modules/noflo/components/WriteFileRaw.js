// Generated by CoffeeScript 1.3.1
(function() {
  var WriteFileRaw, fs, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  fs = require("fs");

  WriteFileRaw = (function(_super) {

    __extends(WriteFileRaw, _super);

    WriteFileRaw.name = 'WriteFileRaw';

    function WriteFileRaw() {
      var _this = this;
      this.filename = null;
      this.data = null;
      this.inPorts = {
        "in": new noflo.Port,
        filename: new noflo.Port
      };
      this.outPorts = {
        filename: new noflo.Port,
        error: new noflo.Port
      };
      this.inPorts["in"].on("data", function(data) {
        _this.data = data;
        if (_this.filename) {
          return _this.writeFile();
        }
      });
      this.inPorts.filename.on("data", function(data) {
        _this.filename = data;
        if (_this.data) {
          return _this.writeFile();
        }
      });
    }

    WriteFileRaw.prototype.writeFile = function() {
      var _this = this;
      return fs.open(this.filename, 'w', function(err, fd) {
        if (err) {
          return _this.outPorts.error.send(err);
        }
        return fs.write(fd, _this.data, 0, _this.data.length, 0, function(err, bytes, buffer) {
          if (err) {
            return _this.outPorts.error.send(err);
          }
          _this.outPorts.filename.send(_this.filename);
          return _this.outPorts.filename.disconnect();
        });
      });
    };

    return WriteFileRaw;

  })(noflo.Component);

  exports.getComponent = function() {
    return new WriteFileRaw;
  };

}).call(this);
