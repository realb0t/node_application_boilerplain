// Generated by CoffeeScript 1.3.1
(function() {
  var MapGroup, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  MapGroup = (function(_super) {

    __extends(MapGroup, _super);

    MapGroup.name = 'MapGroup';

    function MapGroup() {
      var _this = this;
      this.map = {};
      this.regexps = {};
      this.inPorts = {
        map: new noflo.ArrayPort(),
        regexp: new noflo.ArrayPort(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.map.on("data", function(data) {
        return _this.prepareMap(data);
      });
      this.inPorts.regexp.on("data", function(data) {
        return _this.prepareRegExp(data);
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.mapGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.outPorts.out.send(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    MapGroup.prototype.prepareMap = function(map) {
      var mapParts;
      if (typeof map === "object") {
        this.map = map;
        return;
      }
      mapParts = map.split("=");
      return this.map[mapParts[0]] = mapParts[1];
    };

    MapGroup.prototype.prepareRegExp = function(map) {
      var mapParts;
      mapParts = map.split("=");
      return this.regexps[mapParts[0]] = mapParts[1];
    };

    MapGroup.prototype.mapGroup = function(group) {
      var expression, matched, regexp, replacement, _ref;
      if (this.map[group]) {
        this.outPorts.out.beginGroup(this.map[group]);
        return;
      }
      _ref = this.regexps;
      for (expression in _ref) {
        replacement = _ref[expression];
        regexp = new RegExp(expression);
        matched = regexp.exec(group);
        if (!matched) {
          continue;
        }
        this.outPorts.out.beginGroup(group.replace(regexp, replacement));
        return;
      }
      return this.outPorts.out.beginGroup(group);
    };

    return MapGroup;

  })(noflo.Component);

  exports.getComponent = function() {
    return new MapGroup;
  };

}).call(this);
