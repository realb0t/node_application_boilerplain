// Generated by CoffeeScript 1.3.1
(function() {
  var FilterProperty, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  FilterProperty = (function(_super) {

    __extends(FilterProperty, _super);

    FilterProperty.name = 'FilterProperty';

    function FilterProperty() {
      var _this = this;
      this.accepts = [];
      this.regexps = [];
      this.inPorts = {
        accept: new noflo.ArrayPort(),
        regexp: new noflo.ArrayPort(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.accept.on("data", function(data) {
        return _this.accepts.push(data);
      });
      this.inPorts.regexp.on("data", function(data) {
        return _this.regexps.push(data);
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.filterData(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    FilterProperty.prototype.filterData = function(object) {
      var expression, match, newData, property, regexp, value, _i, _len, _ref;
      newData = {};
      match = false;
      for (property in object) {
        value = object[property];
        if (this.accepts.indexOf(property) !== -1) {
          newData[property] = value;
          match = true;
          continue;
        }
        _ref = this.regexps;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          expression = _ref[_i];
          regexp = new RegExp(expression);
          if (regexp.exec(property)) {
            newData[property] = value;
            match = true;
          }
        }
      }
      if (!match) {
        return;
      }
      return this.outPorts.out.send(newData);
    };

    return FilterProperty;

  })(noflo.Component);

  exports.getComponent = function() {
    return new FilterProperty;
  };

}).call(this);
