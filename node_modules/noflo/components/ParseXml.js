// Generated by CoffeeScript 1.3.1
(function() {
  var ParseXml, noflo, xml2js,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  xml2js = require("xml2js");

  ParseXml = (function(_super) {

    __extends(ParseXml, _super);

    ParseXml.name = 'ParseXml';

    function ParseXml() {
      var xml,
        _this = this;
      this.options = {
        normalize: false,
        trim: false,
        explicitRoot: true
      };
      this.inPorts = {
        "in": new noflo.Port(),
        options: new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      xml = "";
      this.inPorts["in"].on("data", function(data) {
        return xml += data;
      });
      this.inPorts["in"].on("disconnect", function() {
        _this.parseXml(xml);
        return xml = "";
      });
      this.inPorts.options.on("data", function(data) {
        return _this.setOptions(data);
      });
    }

    ParseXml.prototype.setOptions = function(options) {
      var key, value, _results;
      if (typeof options !== "object") {
        throw "Options is not an object";
      }
      _results = [];
      for (key in options) {
        if (!__hasProp.call(options, key)) continue;
        value = options[key];
        _results.push(this.options[key] = value);
      }
      return _results;
    };

    ParseXml.prototype.parseXml = function(xml) {
      var parser, target;
      target = this.outPorts.out;
      parser = new xml2js.Parser(this.options);
      parser.on("end", function(parsed) {
        target.send(parsed);
        return target.disconnect();
      });
      return parser.parseString(xml);
    };

    return ParseXml;

  })(noflo.Component);

  exports.getComponent = function() {
    return new ParseXml;
  };

}).call(this);
