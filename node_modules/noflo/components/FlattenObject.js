// Generated by CoffeeScript 1.3.1
(function() {
  var FlattenObject, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  FlattenObject = (function(_super) {

    __extends(FlattenObject, _super);

    FlattenObject.name = 'FlattenObject';

    function FlattenObject() {
      var _this = this;
      this.map = {};
      this.inPorts = {
        map: new noflo.ArrayPort(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.map.on("data", function(data) {
        return _this.prepareMap(data);
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        var object, _i, _len, _ref, _results;
        _ref = _this.flattenObject(data);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          object = _ref[_i];
          _results.push(_this.outPorts.out.send(_this.mapKeys(object)));
        }
        return _results;
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        return _this.outPorts.out.disconnect();
      });
    }

    FlattenObject.prototype.prepareMap = function(map) {
      var mapParts;
      if (typeof map === "object") {
        this.map = map;
        return;
      }
      mapParts = map.split("=");
      return this.map[mapParts[0]] = mapParts[1];
    };

    FlattenObject.prototype.mapKeys = function(object) {
      var key, map, _ref;
      _ref = this.map;
      for (key in _ref) {
        map = _ref[key];
        object[map] = object.flattenedKeys[key];
      }
      delete object.flattenedKeys;
      return object;
    };

    FlattenObject.prototype.flattenObject = function(object) {
      var flattened, flattenedValue, key, val, value, _i, _len;
      flattened = [];
      for (key in object) {
        value = object[key];
        if (typeof value === "object") {
          flattenedValue = this.flattenObject(value);
          for (_i = 0, _len = flattenedValue.length; _i < _len; _i++) {
            val = flattenedValue[_i];
            val.flattenedKeys.push(key);
            flattened.push(val);
          }
          continue;
        }
        flattened.push({
          flattenedKeys: [key],
          value: value
        });
      }
      return flattened;
    };

    return FlattenObject;

  })(noflo.Component);

  exports.getComponent = function() {
    return new FlattenObject;
  };

}).call(this);
