// Generated by CoffeeScript 1.3.1
(function() {
  var CollectGroups, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  CollectGroups = (function(_super) {

    __extends(CollectGroups, _super);

    CollectGroups.name = 'CollectGroups';

    function CollectGroups() {
      var _this = this;
      this.data = {};
      this.keys = [];
      this.currentData = {};
      this.parentData = [];
      this.parentGroup = void 0;
      this.inPorts = {
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts["in"].on("connect", function() {
        return _this.data = {};
      });
      this.inPorts["in"].on("begingroup", function(group) {
        if (_this.keys.length) {
          _this.parentData.push(_this.currentData);
        }
        _this.keys.push(group);
        return _this.currentData = {};
      });
      this.inPorts["in"].on("data", function(data) {
        return _this.setData(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        var group;
        group = _this.keys.pop();
        _this.setToParent(group, _this.currentData);
        if (_this.parentData.length) {
          _this.currentData = _this.parentData.pop();
          return;
        }
        return _this.currentData = _this.data;
      });
      this.inPorts["in"].on("disconnect", function() {
        _this.outPorts.out.send(_this.data);
        return _this.outPorts.out.disconnect();
      });
    }

    CollectGroups.prototype.setToParent = function(group, data) {
      if (!this.parentData.length) {
        this.data[group] = data;
        return;
      }
      return this.setDataToKey(this.parentData[this.parentData.length - 1], group, data);
    };

    CollectGroups.prototype.setData = function(data) {
      var index, key, value, _i, _len;
      if (typeof data === "object") {
        if (toString.call(data) === '[object Array]') {
          for (index = _i = 0, _len = data.length; _i < _len; index = ++_i) {
            value = data[index];
            this.setDataToKey(this.currentData, index, value);
          }
          return;
        }
        for (key in data) {
          value = data[key];
          this.setDataToKey(this.currentData, key, value);
        }
        return;
      }
      return this.setDataToKey(this.currentData, 'value', data);
    };

    CollectGroups.prototype.setDataToKey = function(target, key, value) {
      var index, subKey, val, _i, _len;
      if (!target[key]) {
        return target[key] = value;
      }
      if (typeof target[key] !== "object") {
        target[key] = {
          value: target[key]
        };
        return this.setDataToKey(target, key, value);
      }
      if (typeof value === "object") {
        if (toString.call(value) === '[object Array]') {
          for (index = _i = 0, _len = value.length; _i < _len; index = ++_i) {
            val = value[index];
            this.setDataToKey(target[key], index, val);
          }
          return;
        }
        for (subKey in value) {
          val = value[subKey];
          this.setDataToKey(target[key], subKey, val);
        }
        return;
      }
      return target[key].value = value;
    };

    return CollectGroups;

  })(noflo.Component);

  exports.getComponent = function() {
    return new CollectGroups;
  };

}).call(this);
