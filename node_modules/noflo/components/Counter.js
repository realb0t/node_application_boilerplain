// Generated by CoffeeScript 1.3.1
(function() {
  var Counter, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  Counter = (function(_super) {

    __extends(Counter, _super);

    Counter.name = 'Counter';

    Counter.prototype.count = null;

    Counter.prototype.description = "The count component receives input on a single input port, and sends the number of data packets received to the output port when the input disconnects";

    function Counter() {
      var _this = this;
      this.count = null;
      this.inPorts = {
        "in": new noflo.Port
      };
      this.outPorts = {
        count: new noflo.Port,
        out: new noflo.Port
      };
      this.inPorts["in"].on("data", function(data) {
        if (_this.count === null) {
          _this.count = 0;
        }
        _this.count++;
        if (_this.outPorts.out.isAttached()) {
          return _this.outPorts.out.send(data);
        }
      });
      this.inPorts["in"].on("disconnect", function() {
        _this.outPorts.count.send(_this.count);
        _this.outPorts.count.disconnect();
        return _this.count = null;
      });
    }

    return Counter;

  })(noflo.Component);

  exports.getComponent = function() {
    return new Counter();
  };

}).call(this);
