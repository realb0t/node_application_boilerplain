// Generated by CoffeeScript 1.3.1
(function() {
  var SetPropertyValue, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require("noflo");

  SetPropertyValue = (function(_super) {

    __extends(SetPropertyValue, _super);

    SetPropertyValue.name = 'SetPropertyValue';

    function SetPropertyValue() {
      var _this = this;
      this.property = null;
      this.value = null;
      this.data = [];
      this.inPorts = {
        property: new noflo.Port(),
        value: new noflo.Port(),
        "in": new noflo.Port()
      };
      this.outPorts = {
        out: new noflo.Port()
      };
      this.inPorts.property.on("data", function(data) {
        _this.property = data;
        if (_this.value && _this.data.length) {
          return _this.addProperties();
        }
      });
      this.inPorts.value.on("data", function(data) {
        _this.value = data;
        if (_this.property && _this.data.length) {
          return _this.addProperties();
        }
      });
      this.inPorts["in"].on("begingroup", function(group) {
        return _this.outPorts.out.beginGroup(group);
      });
      this.inPorts["in"].on("data", function(data) {
        if (_this.property && _this.value) {
          return _this.addProperty(data);
        }
        return _this.data.push(data);
      });
      this.inPorts["in"].on("endgroup", function() {
        return _this.outPorts.out.endGroup();
      });
      this.inPorts["in"].on("disconnect", function() {
        if (_this.property && _this.value) {
          _this.outPorts.out.disconnect();
        }
        return _this.value = null;
      });
    }

    SetPropertyValue.prototype.addProperty = function(object) {
      object[this.property] = this.value;
      return this.outPorts.out.send(object);
    };

    SetPropertyValue.prototype.addProperties = function() {
      var object, _i, _len, _ref;
      _ref = this.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        this.addProperty(object);
      }
      this.data = [];
      return this.outPorts.out.disconnect();
    };

    return SetPropertyValue;

  })(noflo.Component);

  exports.getComponent = function() {
    return new SetPropertyValue;
  };

}).call(this);
