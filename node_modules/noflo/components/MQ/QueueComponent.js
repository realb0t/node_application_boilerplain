// Generated by CoffeeScript 1.3.1
(function() {
  var QueueComponent, kckupmq, noflo, url,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require('noflo');

  kckupmq = require('kckupmq');

  url = require('url');

  QueueComponent = (function(_super) {

    __extends(QueueComponent, _super);

    QueueComponent.name = 'QueueComponent';

    function QueueComponent() {
      return QueueComponent.__super__.constructor.apply(this, arguments);
    }

    QueueComponent.prototype.basePortSetup = function() {
      var _this = this;
      this.config = this.checkEnv();
      this.clientId = null;
      this.mqType = 'redis';
      this.inPorts = {
        config: new noflo.Port,
        clientid: new noflo.Port
      };
      this.inPorts.config.on('data', function(data) {
        return _this.config = data;
      });
      return this.inPorts.clientid.on('data', function(data) {
        return _this.clientId = data;
      });
    };

    QueueComponent.prototype.checkEnv = function() {
      var config, rtg;
      if (!process.env.REDISTOGO_URL) {
        return {};
      }
      rtg = url.parse(process.env.REDISTOGO_URL);
      config = {
        auth: {}
      };
      config.host = rtg.hostname;
      config.port = rtg.port;
      config.auth.password = rtg.auth.split(':')[1];
      return config;
    };

    QueueComponent.prototype.getMQ = function() {
      return kckupmq.instance(this.mqType, this.config, this.clientId);
    };

    return QueueComponent;

  })(noflo.Component);

  exports.QueueComponent = QueueComponent;

}).call(this);
