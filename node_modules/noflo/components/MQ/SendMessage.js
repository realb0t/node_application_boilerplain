// Generated by CoffeeScript 1.3.1
(function() {
  var QueueComponent, SendMessage, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require('noflo');

  QueueComponent = require('./QueueComponent').QueueComponent;

  SendMessage = (function(_super) {

    __extends(SendMessage, _super);

    SendMessage.name = 'SendMessage';

    function SendMessage() {
      var groups, mq,
        _this = this;
      this.basePortSetup();
      mq = null;
      groups = [];
      this.inPorts["in"] = new noflo.ArrayPort;
      this.inPorts["in"].on('connect', function() {
        return mq = _this.getMQ();
      });
      this.inPorts["in"].on('begingroup', function(group) {
        if (groups.indexOf(group) !== -1) {
          return;
        }
        return groups.push(group);
      });
      this.inPorts["in"].on('data', function(data) {
        if (!mq) {
          return;
        }
        if (mq.pub.connected) {
          return mq.publish(groups.join(':'), data);
        }
        return mq.pub.once('connect', function() {
          return mq.publish(groups.join(':'), data);
        });
      });
      this.inPorts["in"].on('endgroup', function() {
        return groups.pop();
      });
      this.inPorts["in"].on('disconnect', function() {
        if (mq) {
          mq.disconnect();
        }
        return mq = null;
      });
    }

    return SendMessage;

  })(QueueComponent);

  exports.getComponent = function() {
    return new SendMessage;
  };

}).call(this);
