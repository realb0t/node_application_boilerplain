// Generated by CoffeeScript 1.3.1
(function() {
  var Listen, QueueComponent, noflo,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  noflo = require('noflo');

  QueueComponent = require('./QueueComponent').QueueComponent;

  Listen = (function(_super) {

    __extends(Listen, _super);

    Listen.name = 'Listen';

    function Listen() {
      var _this = this;
      this.basePortSetup();
      this.mq = null;
      this.inPorts.topic = new noflo.ArrayPort;
      this.outPorts = {
        out: new noflo.ArrayPort
      };
      this.inPorts.topic.on('connect', function() {
        return _this.mq = _this.getMQ();
      });
      this.inPorts.topic.on('data', function(topic) {
        var groups;
        if (!_this.mq) {
          return;
        }
        groups = topic.split(':');
        return _this.mq.subscribe(topic, function(err, topics) {
          return _this.mq.on(topic, function(id, message) {
            var group, _i, _j, _len, _len1, _results;
            for (_i = 0, _len = groups.length; _i < _len; _i++) {
              group = groups[_i];
              _this.outPorts.out.beginGroup(group);
            }
            _this.outPorts.out.send(message);
            _results = [];
            for (_j = 0, _len1 = groups.length; _j < _len1; _j++) {
              group = groups[_j];
              _results.push(_this.outPorts.out.endGroup());
            }
            return _results;
          });
        });
      });
    }

    Listen.prototype.disconnectMQ = function() {
      if (this.mq) {
        this.mq.disconnect();
      }
      return this.mq = null;
    };

    return Listen;

  })(QueueComponent);

  exports.getComponent = function() {
    return new Listen;
  };

}).call(this);
